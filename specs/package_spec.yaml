before: |
  require "spec_helper"

  this_module        = "std.package"

  global_table       = "_G"
  base_module        = "package"
  extend_base        = { "dirsep", "pathsep", "path_mark",
                         "execdir", "igmark" }

  M = require (this_module)

specify std.package:
- context when required:
  - context by name:
    - it does not touch the global table:
        expect (show_apis {added_to=global_table, by=this_module}).
          should_equal {}
    - it contains apis from the core package table:
        expect (show_apis {from=base_module, not_in=this_module}).
          should_contain.a_permutation_of (extend_base)
    - it replaces no apis from the core package table:
        expect (show_apis {from=base_module, enhanced_in=this_module}).
          should_equal {}

  - context via the std module:
    - it adds apis to the core package table:
        expect (show_apis {added_to=base_module, by="std"}).
          should_contain.a_permutation_of (extend_base)
    - it replaces no apis from the core package table:
        expect (show_apis {from=base_module, enhanced_after='require "std"'}).
          should_equal {}


- it splits package.config up:
    expect (string.format ("%s\n%s\n%s\n%s\n%s\n",
            M.dirsep, M.pathsep, M.path_mark, M.execdir, M.igmark)
    ).should_contain (package.config)
