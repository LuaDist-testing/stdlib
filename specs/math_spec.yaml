before: |
  this_module  = "std.math"

  global_table = "_G"
  base_module  = "math"
  extend_base  = { "round", "_floor" }
  enhance_base = { "floor" }

  -- 'to_contain' will match keys as well as values :)
  all_apis = {}
  for _, s in ipairs (extend_base)     do all_apis[s] = true end
  for _, s in ipairs (enhance_base)    do all_apis[s] = true end

  M = require (this_module)

specify std.math:
- context when required:
  - context by name:
    - it does not touch the global table:
        expect (show_apis {added_to=global_table, by=this_module}).
          to_equal {}
    - it contains apis from the core math table:
        expect (show_apis {from=base_module, not_in=this_module}).
          to_contain.a_permutation_of (all_apis)
    - it enhances some apis from the core math table:
        expect (show_apis {from=base_module, enhanced_in=this_module}).
          to_contain.a_permutation_of (enhance_base)

  - context via the std module:
    - it adds apis to the core math table:
        expect (show_apis {added_to=base_module, by="std"}).
          to_contain.a_permutation_of (extend_base)
    - it replaces some apis from the core math table:
        expect (show_apis {from=base_module, enhanced_after='require "std"'}).
          to_contain.a_permutation_of (enhance_base)


- describe floor:


- describe round:
