before: |
  require "spec_helper"

  this_module        = "std.io"

  global_table       = "_G"
  std_globals        = { "die", "warn" }

  base_module        = "io"
  extend_base        = { "catdir", "catfile", "die", "process_files",
                         "readlines", "shell", "slurp", "splitdir",
                         "warn", "writelines",
                         -- camelCase compatibility:
                         "processFiles" }
  extend_metamethods = { "readlines", "writelines" }

  M = require (this_module)

specify std.io:
- context when required:
  - context by name:
    - it does not touch the global table:
        expect (show_apis {added_to=global_table, by=this_module}).
          should_equal {}
    - it contains apis from the core io table:
        expect (show_apis {from=base_module, not_in=this_module}).
          should_contain.a_permutation_of (extend_base)
    - it replaces no apis from the core io table:
        expect (show_apis {from=base_module, enhanced_in=this_module}).
          should_equal {}

  - context via the std module:
    - it adds apis to the global table:
        expect (show_apis {added_to=global_table, by="std"}).
          should_contain.all_of (std_globals)
    - it adds apis to the core io table:
        expect (show_apis {added_to=base_module, by="std"}).
          should_contain.a_permutation_of (extend_base)
    - it adds methods to the file metatable:
        expect (show_apis {added_to="getmetatable (io.stdin)", by="std"}).
          should_contain.a_permutation_of (extend_metamethods)
    - it replaces no apis from the core io table:
        expect (show_apis {from=base_module, enhanced_after='require "std"'}).
          should_equal {}


- describe catdir:


- describe catfile:


- describe die:


- describe process_files:
  - it is the same function as legacy processFiles call:
      expect (M.process_files).should_be (M.processFiles)


- describe readlines:


- describe shell:


- describe slurp:


- describe splitdir:


- describe warn:


- describe writelines:
